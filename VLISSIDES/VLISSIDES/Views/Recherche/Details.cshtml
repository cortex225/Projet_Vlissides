@using VLISSIDES.ViewModels.Recherche;
@model DetailsLivreVM
@{
    var myURL = Context.Request.Host.Value;
    var BASE_URL_RAZOR = Url.Content("~");
}


<link rel="stylesheet" href="~/css/Details.css">
<div class="container-fluid">

<h1 class=" Titre-Page mx-auto">Détails du livre</h1>
<div>
    <div id="detailsDivPrincipal">
        <input type="hidden" id="viewModelId" name="viewModelId" value="@Model.Id"/>
        <div id="DetailsDIV">
            @{
                string couverture = string.Concat(BASE_URL_RAZOR, Model.Couverture);
            }

            <img id="DetailsIMG" src="@Html.Raw(couverture)"/>
            <div class="Container-Evaluation px-4">
                <p > Évaluation de nos lecteurs</p>
                <partial name="PartialViews/Accueil/_Etoiles" model=@Model.Note />
            </div>

        </div>

        <div id="DetailsInfo">
            <h2 class="Details-Titre">@Model.Titre</h2>
            @foreach (var auteur in Model.Auteurs)
            {
                <p class="Detail-Auteurs">Auteur(s): @auteur</p>
            }

            <p class="Details-Resume">
                @Model.Resume
            </p>


           <div class="price-options">
               @if (!Model.Papier.Equals(null))
               {
                   <div class="price-container">
                       <button class="price-button paper" onclick="toggleActive(this, 'paper')">
                           <i class="fas fa-book icon"></i>
                           <div class="price-info">
                               <span class="type-name">Papier</span>
                               <span class="price">@Model.Papier $</span>
                           </div>
                       </button>
                       <div id="quantity-selector-paper" class="quantity-selector" style="display: none;">
                           <button class="quantity-btn" onclick="changeQuantity('decrease', 'paper')">-</button>
                           <input type="number" id="quantity-paper" class="quantity-input" value="1" min="1">
                           <button class="quantity-btn" onclick="changeQuantity('increase', 'paper')">+</button>
                       </div>
                   </div>
               }
               @if (!Model.Numerique.Equals(null))
               {
                   <div class="price-container">
                       <button class="price-button digital" onclick="toggleActive(this, 'digital')">
                           <i class="fas fa-tablet-alt icon"></i>
                           <div class="price-info">
                               <span class="type-name">Numérique</span>
                               <span class="price">@Model.Numerique $</span>
                           </div>
                       </button>
                   </div>
               }
           </div>


          <div class="Details-More-Info card">

              <div class="card-body">
                  <p class="info-item"><span class="info-title">ISBN:</span> @Model.ISBN</p>
                  <p class="info-item"><span class="info-title">Date de publication:</span> @Model.DatePublication</p>
                  <p class="info-item"><span class="info-title">Langue:</span> @Model.Langue</p>
                  <p class="info-item"><span class="info-title">Catégorie(s):</span>
                      <ul class="categories-list">
                          @foreach (var categorie in Model.Categories)
                          {
                              <li class="badge badge-primary">@categorie</li>
                          }
                      </ul>
                  </p>
                  <p class="info-item"><span class="info-title">Éditeur:</span> @Model.MaisonEdition</p>
                  <p class="info-item"><span class="info-title">Nombre de pages:</span> @Model.NbPages</p>
              </div>
          </div>



        </div>
        <div>
            @if (!Model.Papier.Equals(null)) //1 = "Neuf"
            {
                <br/>
                @if (Model.NbExemplaires > 0)
                {
                    @if (!(User.IsInRole(RoleName.ADMIN) || User.IsInRole(RoleName.EMPLOYE)))
                    {
                        <form>
                            @Html.AntiForgeryToken()
                            <p class="stock-restant">
                                <span class="stock-indicator"></span>
                                En stock (<span id="stock-count">@Model.NbExemplaires</span>restants )
                            </p>

                            <div class="btn-group" role="group" aria-label="Basic example">

                                <a id="ajouterNeuf" class="btn btn-primary btnPanier">
                                    <i class="fa-solid fa-basket-shopping"></i>Ajouter au panier (Neuf)
                                </a>
                                <input type="number" id="quantite" name="quantite" min="1" max="@Model.NbExemplaires" step="1" value="1">

                                <div id="preorder-alert" class="alert alert-warning d-none">
                                    Vous avez atteint la quantité maximale disponible en inventaire.
                                    <button id="preorder-confirm" class="btn btn-primary btn-sm">Précommander le surplus</button>
                                </div>
                            </div>
                        </form>
                    }

                    else
                    {
                        <p style="font-weight: bold;">En stock (@Model.NbExemplaires restants)</p>
                    }
                }
                else
                {
                    <p style="font-weight: bold; color: red;">Livre neuf en rupture de stock</p>
                }
            }
            @if (!Model.Numerique.Equals(null)) //2 = "Numérique"
            {
                @if (!(User.IsInRole(RoleName.ADMIN) || User.IsInRole(RoleName.EMPLOYE)))
                {
                    <form>
                        @Html.AntiForgeryToken()
                        <a href="#" id="ajouterNumerique" class="btn btn-primary btnPanier">
                            <i class="fa-solid fa-basket-shopping"></i>Ajouter au panier (Numérique)
                        </a>
                    </form>
                }
            }
        </div>
    </div>

</div>
<div class="modal" tabindex="-1" id="preorderModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Précommande</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>La quantité demandée n'est pas disponible en stock. Voulez-vous précommander le surplus ?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                <button type="button" class="btn btn-primary" id="confirmPreorder">Confirmer la précommande</button>
            </div>
        </div>
    </div>
</div>
</div>
<script>
    //Script pour URL
    const BASE_URL = @Json.Serialize(BASE_URL_RAZOR);
</script>
<script>

function getNbArticles() {
$(document).ready(function () {
        $.ajax({
            url: BASE_URL+"/Panier/NbArticles",
            type: "GET",
            dataType: "json",
            success: function (data) {
                $("#nbArticles").html(data).animate({fontSize: "30px"}, 1000);
            }
        });

    }
);
}
</script>

<script type="text/javascript">
    var ajouterNeuf = document.getElementById("ajouterNeuf");
    if (ajouterNeuf) {
        ajouterNeuf.addEventListener("click", ajouterLivreNeufDetails);
    }
    var ajouterNumerique = document.getElementById("ajouterNumerique");

    if (ajouterNumerique) {
        ajouterNumerique.addEventListener("click", ajouterLivreNumeriqueDetails);
    }

    async function ajouterLivreNeufDetails(){

        var csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        var quantitee = document.getElementById("quantite").value;

        var viewModelId = document.getElementById("viewModelId").value;

        fetch(BASE_URL + '/Panier/AjouterPanier', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': csrfToken
            },
            body: JSON.stringify({
                livreAjouteId: viewModelId,
                quantitee: quantitee,
                typeId: "1"
            })
        })
        .then(response => {
            // Vérifier si la réponse est au format JSON
            if (!response.ok) {
                           getNbArticles();

                throw new Error(`Erreur HTTP! Statut: ${response.status}`);
            }

            return response.json();
        })
        .then(data => {
                // Traiter les données JSON
                console.log(data);
        })
        .catch(error => {
            // Gérer les erreurs
            console.error("Erreur lors de la requête FETCH:", error);
        });
    }

    async function ajouterLivreNumeriqueDetails(){

        var csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        var viewModelId = document.getElementById("viewModelId").value;

        fetch(BASE_URL + '/Panier/AjouterPanier', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': csrfToken
            },
            body: JSON.stringify({
                livreAjouteId: viewModelId,
                quantitee: null,
                typeId: "2"
            })
        })
        .then(response => {
            // Vérifier si la réponse est au format JSON
            if (!response.ok) {
                                getNbArticles();

                throw new Error(`Erreur HTTP! Statut: ${response.status}`);
            }

            return response.json();
        })
        .then(data => {
                // Traiter les données JSON
                console.log(data);
        })
        .catch(error => {
            // Gérer les erreurs
            console.error("Erreur lors de la requête FETCH:", error);
        });
    }
</script>

<script>
$(document).ready(function () {
    $('#quantite').on('input', function () {
        var maxQuantity = parseInt($(this).attr('max'));
        var currentQuantity = parseInt($(this).val());

        if (currentQuantity > maxQuantity) {
            $('#preorderModal').modal('show');
        }
    });

    $('#confirmPreorder').on('click', function () {
        // Ici, vous pouvez ajouter une requête AJAX pour envoyer la confirmation de précommande au serveur
        $('#preorderModal').modal('hide');
        alert('Votre précommande a été confirmée.');
    });

                                getNbArticles();
});

</script>

<script>
document.addEventListener('DOMContentLoaded', (event) => {
  var stockCount = parseInt(document.getElementById('stock-count').textContent);
  var stockIndicator = document.querySelector('.stock-indicator');

  if (stockCount > 0) {
    stockIndicator.classList.add('in-stock');
  } else {
    stockIndicator.classList.add('out-of-stock');
  }
});

</script>

<script>
function toggleActive(button, type) {
    button.classList.toggle('active');
    const selector = document.getElementById('quantity-selector-' + type);
    if (button.classList.contains('active')) {
        selector.style.display = 'flex';
        button.style.backgroundColor = '#386bc0';
        button.style.color = 'white';

    } else {
        selector.style.display = 'none';
        button.style.backgroundColor = '#ffffff';
        button.style.color = 'black';
    }
}

function changeQuantity(action, type) {
    const quantityInput = document.getElementById('quantity-' + type);
    let currentQuantity = parseInt(quantityInput.value, 10);

    if (action === 'increase') {
        currentQuantity += 1;
    } else if (action === 'decrease' && currentQuantity > 1) {
        currentQuantity -= 1;
    }

    quantityInput.value = currentQuantity;
}

</script>