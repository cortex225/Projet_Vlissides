@model VLISSIDES.ViewModels.Recherche.DetailsLivreVM
@{
    var myURL = Context.Request.Host.Value;
    var BASE_URL_RAZOR = Url.Content("~");
}


<link rel="stylesheet" href="~/css/Details.css" asp-append-version="true">
<div class="container-fluid">

    <h1 class=" Titre-Page mx-auto">Détails du livre</h1>
    <div>
        <div id="detailsDivPrincipal">
            <input type="hidden" id="viewModelId" name="viewModelId" value="@Model.Id"/>
            <div id="DetailsDIV">
                @{
                    var couverture = string.Concat(BASE_URL_RAZOR, Model.Couverture);
                }

                <img id="DetailsIMG" src="@Html.Raw(couverture)"/>
                <div class="Container-Evaluation px-4">
                    <p > Évaluation de nos lecteurs</p>
                    <partial name="PartialViews/Accueil/_Etoiles" model="@Model.Note"/>
                </div>

            </div>

            <div id="DetailsInfo">
                <h2 class="Details-Titre">@Model.Titre</h2>
                @foreach (var auteur in Model.Auteurs)
                {
                    <p class="Detail-Auteurs">Auteur(s): @auteur</p>
                }

                <p class="Details-Resume">
                    @Model.Resume
                </p>


                <div class="price-options">
                    @if (!Model.Papier.Equals(null))
                    {
                        <div class="price-container">
                            <button class="price-button paper" onclick="toggleActive(this, 'paper')">
                                <i class="fas fa-book icon"></i>
                                <div class="price-info">
                                    <span class="type-name">Papier</span>
                                    <span class="price">@Model.Papier $</span>
                                </div>
                            </button>
                            <div id="quantity-selector-paper" class="quantity-selector" style="display: none;">
                                <button class="quantity-btn" onclick="changeQuantity('decrease', 'paper')">-</button>
                                <input type="number" id="quantity-paper" class="quantity-input" value="1" min="1">
                                <button class="quantity-btn" onclick="changeQuantity('increase', 'paper')">+</button>
                            </div>
                        </div>
                    }
                    @if (!Model.Numerique.Equals(null))
                    {
                        <div class="price-container">
                            <button class="price-button digital" onclick="toggleActive(this, 'digital')">
                                <i class="fas fa-tablet-alt icon"></i>
                                <div class="price-info">
                                    <span class="type-name">Numérique</span>
                                    <span class="price">@Model.Numerique $</span>
                                </div>
                            </button>
                        </div>
                    }
                </div>


                <div class="Details-More-Info card">

                    <div class="card-body">
                        <p class="info-item">
                            <span class="info-title">ISBN:</span> @Model.ISBN
                        </p>
                        <p class="info-item">
                            <span class="info-title">Date de publication:</span> @Model.DatePublication
                        </p>
                        <p class="info-item">
                            <span class="info-title">Langue:</span> @Model.Langue
                        </p>
                        <p class="info-item">
                            <span class="info-title">Catégorie(s):</span>
                            <ul class="categories-list">
                                @foreach (var categorie in Model.Categories)
                                {
                                    <li class="badge badge-primary">@categorie</li>
                                }
                            </ul>
                        </p>
                        <p class="info-item">
                            <span class="info-title">Éditeur:</span> @Model.MaisonEdition
                        </p>
                        <p class="info-item">
                            <span class="info-title">Nombre de pages:</span> @Model.NbPages
                        </p>
                    </div>
                </div>


            </div>
            <div>
                @if (!Model.Papier.Equals(null)) //1 = "Neuf"
                {
                    <br/>
                    @if (Model.NbExemplaires > 0)
                    {
                        @if (!(User.IsInRole(RoleName.ADMIN) || User.IsInRole(RoleName.EMPLOYE)))
                        {
                            <p class="stock-restant">
                                <span class="stock-indicator"></span>
                                En stock (<span id="stock-count">@Model.NbExemplaires</span>restants )
                            </p>
                        }

                        else
                        {
                            <p style="font-weight: bold;">En stock (@Model.NbExemplaires restants)</p>
                        }
                    }
                    else
                    {
                        <p class="stock-restant">
                            <span class="stock-indicator"></span>
                            En rupture de stock
                        </p>
                        //boutton pour envoyer un courriel lorsque le livre est de retour en stock
                        <a class="btn btn-primary " id="demanderNotification" data-livre-id="@Model.Id">
                            <i class="fa-solid fa-paper-plane"></i>
                            Recevoir un courriel lorsque le livre sera disponible ?
                        </a>
                    }
                }
                <button id="ajouterAuPanier" class="btn btn-primary ">
                    <i class="fa-solid  fa-basket-shopping"></i>
                    Ajouter au panier
                </button>


            </div>
        </div>

    </div>
</div>
<script>
    //Script pour URL
    const BASE_URL = @Json.Serialize(BASE_URL_RAZOR);
</script>
<script>

function getNbArticles() {
$(document).ready(function () {
        $.ajax({
            url: BASE_URL+"/Panier/NbArticles",
            type: "GET",
            dataType: "json",
            success: function (data) {
                $("#nbArticles").html(data).animate({fontSize: "30px"}, 1000);
            }
        });

    }
);
}
</script>

<script type="text/javascript">
    var ajouterNeuf = document.getElementById("ajouterNeuf");
    if (ajouterNeuf) {
        ajouterNeuf.addEventListener("click", ajouterLivreNeufDetails);
    }
    var ajouterNumerique = document.getElementById("ajouterNumerique");

    if (ajouterNumerique) {
        ajouterNumerique.addEventListener("click", ajouterLivreNumeriqueDetails);
    }

    async function ajouterLivreNeufDetails(){

        var csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        var quantitee = document.getElementById("quantite").value;

        var viewModelId = document.getElementById("viewModelId").value;

        fetch(BASE_URL + '/Panier/AjouterPanier', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': csrfToken
            },
            body: JSON.stringify({
                livreAjouteId: viewModelId,
                quantitee: quantitee,
                typeId: "1"
            })
        })
        .then(response => {
            // Vérifier si la réponse est au format JSON
            if (!response.ok) {
                           getNbArticles();

                throw new Error(`Erreur HTTP! Statut: ${response.status}`);
            }

            return response.json();
        })
        .then(data => {
                // Traiter les données JSON
                console.log(data);
        })
        .catch(error => {
            // Gérer les erreurs
            console.error("Erreur lors de la requête FETCH:", error);
        });
    }

    async function ajouterLivreNumeriqueDetails(){

        var csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        var viewModelId = document.getElementById("viewModelId").value;

        fetch(BASE_URL + '/Panier/AjouterPanier', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': csrfToken
            },
            body: JSON.stringify({
                livreAjouteId: viewModelId,
                quantitee: null,
                typeId: "2"
            })
        })
        .then(response => {
            // Vérifier si la réponse est au format JSON
            if (!response.ok) {
                                getNbArticles();

                throw new Error(`Erreur HTTP! Statut: ${response.status}`);
            }

            return response.json();
        })
        .then(data => {
                // Traiter les données JSON
                console.log(data);
        })
        .catch(error => {
            // Gérer les erreurs
            console.error("Erreur lors de la requête FETCH:", error);
        });
    }
</script>

<script>
document.addEventListener('DOMContentLoaded', (event) => {
  var stockCount = @Model.NbExemplaires;
  var stockIndicator = document.getElementsByClassName('stock-indicator')[0];

  if (stockCount > 0) {
    stockIndicator.classList.add('in-stock');
  } else {
    stockIndicator.classList.add('out-of-stock');
  }
});

</script>

<script>
function toggleActive(button, type) {
    // Détermine le type de bouton opposé (numérique ou papier)
    const otherButtonType = type === 'digital' ? 'paper' : 'digital';
    // Sélectionne le bouton opposé
    const otherButton = document.querySelector('.price-button.' + otherButtonType);

    // Vérifie si le bouton actuel est déjà sélectionné
    if (button.classList.contains('active')) {
        // Si déjà sélectionné, le désélectionne et masque le sélecteur de quantité
        button.classList.remove('active');
        const selector = document.getElementById('quantity-selector-' + type);
        selector.style.display = 'none';
        button.style.backgroundColor = '#ffffff'; // Rétablit la couleur de fond par défaut
        button.style.color = 'black'; // Rétablit la couleur du texte par défaut
    } else {
        // Si non sélectionné, le sélectionne et affiche le sélecteur de quantité
        button.classList.add('active');
        const selector = document.getElementById('quantity-selector-' + type);
        selector.style.display = 'flex';
        button.style.backgroundColor = '#386bc0'; // Met en surbrillance le bouton sélectionné
        button.style.color = 'white'; // Change la couleur du texte pour contraste

        // Désélectionne l'autre type s'il est déjà sélectionné
        if (otherButton.classList.contains('active')) {
            otherButton.classList.remove('active');
            const otherSelector = document.getElementById('quantity-selector-' + otherButtonType);
            otherSelector.style.display = 'none'; // Masque le sélecteur de l'autre type
            otherButton.style.backgroundColor = '#ffffff'; // Rétablit la couleur de fond par défaut
            otherButton.style.color = 'black'; // Rétablit la couleur du texte par défaut
        }
    }
}



function changeQuantity(action, type) {
    const quantityInput = document.getElementById('quantity-' + type);
    let currentQuantity = parseInt(quantityInput.value, 10);

    if (action === 'increase') {
        currentQuantity += 1;
    } else if (action === 'decrease' && currentQuantity > 1) {
        currentQuantity -= 1;
    }

    quantityInput.value = currentQuantity;
}

</script>

<script>
document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('ajouterAuPanier').addEventListener('click', () => {
                var csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                var viewModelId = document.getElementById('viewModelId').value;

                // Vérifie si le livre papier est actif (sélectionné)
                var isPaperActive = document.querySelector('.price-button.paper.active') !== null;
                // Vérifie si le livre numérique est actif (sélectionné)
                var isDigitalActive = document.querySelector('.price-button.digital.active') !== null;

                // Si le livre papier est actif, obtenez la quantité et ajoutez au panier
                if (isPaperActive) {
                    var quantity = document.getElementById('quantity-paper').value;
                    addToCart(viewModelId, quantity, '1', csrfToken); // '1' pour le livre papier
                }

                // Si le livre numérique est actif, ajoutez un seul exemplaire au panier
                if (isDigitalActive) {
                    addToCart(viewModelId, '1', '2', csrfToken); // '2' pour le livre numérique
                }
            });
        });

        // Fonction pour ajouter des articles au panier
        function addToCart(bookId, quantity, typeId, csrfToken) {
            // Envoie une requête pour ajouter un article au panier
            fetch(BASE_URL + '/Panier/AjouterPanier', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': csrfToken
                },
                body: JSON.stringify({
                    livreAjouteId: bookId,
                    quantitee: quantity,
                    typeId: typeId
                })
            })
            .then(response => {
                // Gérez les erreurs de réponse non-OK
                if (!response.ok) {
                              getNbArticles();

                    throw new Error(`Erreur HTTP! Statut: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                // Met à jour l'interface utilisateur pour refléter que l'article a été ajouté au panier
                console.log(data);
            })
            .catch(error => {
                // Gére les erreurs de la requête fetch
                console.error("Erreur lors de la requête FETCH:", error);
            });
        }

</script>

<script>
document.getElementById('demanderNotification').addEventListener('click', function() {
    var livreId = this.getAttribute('data-livre-id');
    // Appel AJAX pour enregistrer la demande de notification
    fetch('/Panier/EnregistrerDemandeNotification?livreId=' + livreId, {
        method: 'POST',
        body: JSON.stringify({ livreId: livreId }),
        headers: {
            'Content-Type': 'application/json'
        }
    }).then(response => {
         return response.json();
                }).then(data => {
                    // Utilise les données JSON pour afficher l'alerte
                    if (data.success) {
                        Swal.fire({
                            title: 'Demande enregistrée',
                            text: data.message,
                            icon: 'success',
                            confirmButtonColor: '#3085d6',
                        });
                    } else {
                        Swal.fire({
                            title: 'Erreur',
                            text: data.message,
                            icon: 'error',
                            confirmButtonColor: '#3085d6',
                        });
                    }
                }).catch(error => {
                    Swal.fire({
                        title: 'Erreur',
                        text: 'Une erreur est survenue lors de la tentative d\'enregistrement de votre demande.',
                        icon: 'error',
                        confirmButtonColor: '#3085d6',
                    });
                });

});

</script>