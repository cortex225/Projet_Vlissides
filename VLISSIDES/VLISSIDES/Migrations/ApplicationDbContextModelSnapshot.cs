// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VLISSIDES.Data;

#nullable disable

namespace VLISSIDES.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0",
                            ConcurrencyStamp = "a5a51af8-8a9d-4e56-ba9b-9785481f7bc4",
                            Name = "Employe",
                            NormalizedName = "EMPLOYE"
                        },
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "5214457a-12fe-4fa2-a341-3ba5ad36c651",
                            Name = "Membre",
                            NormalizedName = "MEMBRE"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "0754827d-73d8-4f92-a5c2-999a8c41fd47",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "0"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "0",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "c7d81843-cbe3-4709-abd3-d619f8b4d61c",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "ae645e99-7c97-42c4-a2db-0cee813b8c39",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "0d343967-cb36-4514-a5d8-d64b248f3eb9",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "85761bd9-65e9-4568-9290-ceab2d36498d",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "79130d7a-bfd4-4597-870c-acb98eabcee8",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "73f2b3b0-f352-49d3-9e96-92e48e0f2841",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VLISSIDES.Models.Adresse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoApartement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoCivique")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilisateurLivraisonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UtilisateurPrincipalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurLivraisonId");

                    b.HasIndex("UtilisateurPrincipalId")
                        .IsUnique()
                        .HasFilter("[UtilisateurPrincipalId] IS NOT NULL");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("VLISSIDES.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AdressePrincipaleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DerniereUtilisationPromoAnniversaire")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8435c566-ab22-4aa9-b8b4-5e85fabe9ae4",
                            Email = "Admin@LaFourmiAilee.com",
                            EmailConfirmed = true,
                            IsBanned = false,
                            LockoutEnabled = false,
                            Nom = "ADMIN",
                            NormalizedEmail = "ADMIN@LAFOURMIAILEE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEF43OL2o51Yi6zRBnpl0RXloMapVIPngv3SLbD4Xt5WF7mUXEcSIGyMjEDaMUPC/JA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "Admin",
                            SecurityStamp = "c94d61f2-302c-43e0-97cb-cc54fe5d4302",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Auteur", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NomAuteur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Auteurs", (string)null);
                });

            modelBuilder.Entity("VLISSIDES.Models.Categorie", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Description = "Une section dédiée à l'exploration des chefs-d'œuvre artistiques, des mouvements et des artistes qui ont marqué l'histoire.",
                            Nom = "Art"
                        },
                        new
                        {
                            Id = "2",
                            Description = "Plongez dans un monde de bien-être, d'esthétique et d'équilibre pour enrichir votre quotidien.",
                            Nom = "Art de vivre"
                        },
                        new
                        {
                            Id = "3",
                            Description = "De colorées bandes dessinées aux histoires captivantes pour les plus jeunes, sans oublier une touche d'humour.",
                            Nom = "BD - Jeunesse - Humour"
                        },
                        new
                        {
                            Id = "4",
                            Description = "Un vaste choix de narrations graphiques, des super-héros aux récits autobiographiques.",
                            Nom = "Bandes dessinées"
                        },
                        new
                        {
                            Id = "5",
                            Description = "Découvrez les vies fascinantes des personnalités qui ont façonné le monde.",
                            Nom = "Biographie"
                        },
                        new
                        {
                            Id = "6",
                            Description = "Voyagez dans des mondes lointains avec des histoires intemporelles, des fables et des légendes.",
                            Nom = "Conte"
                        },
                        new
                        {
                            Id = "7",
                            Description = "Des recettes alléchantes aux guides sommeliers, découvrez les saveurs du monde.",
                            Nom = "Cuisine – Vin"
                        },
                        new
                        {
                            Id = "8",
                            Description = "Approfondissez votre compréhension des sociétés contemporaines et de leurs nuances culturelles.",
                            Nom = "Culture et Société"
                        },
                        new
                        {
                            Id = "9",
                            Description = "Des ressources pour les linguistes, les étudiants et les éternels apprenants.",
                            Nom = "Dictionnaire – Langues – Éducation"
                        },
                        new
                        {
                            Id = "10",
                            Description = "Engagez-vous dans des réflexions profondes et argumentatives sur des enjeux contemporains.",
                            Nom = "Essai"
                        },
                        new
                        {
                            Id = "11",
                            Description = "Explorez le monde naturel, de la canopée de la jungle aux profondeurs des océans.",
                            Nom = "Faune – Flore"
                        },
                        new
                        {
                            Id = "12",
                            Description = "Évadez-vous avec des guides de voyage et des récits d'aventuriers des quatre coins du monde.",
                            Nom = "Géographie – Voyage"
                        },
                        new
                        {
                            Id = "13",
                            Description = "Démystifiez le monde des affaires, la complexité économique et les arcanes du droit.",
                            Nom = "Gestion – Économie – droit"
                        },
                        new
                        {
                            Id = "14",
                            Description = "Conseils et astuces pour naviguer dans la vie quotidienne, du bricolage à la gestion du temps.",
                            Nom = "Guide pratique"
                        },
                        new
                        {
                            Id = "15",
                            Description = "Immergez-vous dans les moments clés de l'histoire et les débats politiques actuels. ",
                            Nom = "Histoire - Politique"
                        },
                        new
                        {
                            Id = "16",
                            Description = "Pour un moment de détente, une collection de recueils drôles et de satires.",
                            Nom = "Humour"
                        },
                        new
                        {
                            Id = "17",
                            Description = "Restez à la pointe de la technologie avec des guides sur les logiciels, le codage et les innovations numériques.",
                            Nom = "Informatique"
                        },
                        new
                        {
                            Id = "18",
                            Description = "Une riche collection de classiques et de nouvelles œuvres, pour les amateurs de belle lettre.",
                            Nom = "Littérature"
                        },
                        new
                        {
                            Id = "19",
                            Description = "Inspirez-vous pour votre prochaine aventure, qu'elle soit en pleine nature ou dans une métropole animée.",
                            Nom = "Loisir - Tourisme - Nature"
                        },
                        new
                        {
                            Id = "20",
                            Description = "Des ressources pour les parents et ceux qui aspirent à le devenir, pour une vie familiale épanouie.",
                            Nom = "Maternité – Famille"
                        },
                        new
                        {
                            Id = "21",
                            Description = "Laissez-vous emporter par le rythme des vers, l'intensité du théâtre et la profondeur des essais.",
                            Nom = "Poésie – Théâtre – Essais"
                        },
                        new
                        {
                            Id = "22",
                            Description = "omprenez mieux la complexité de l'esprit humain et les clés d'une vie saine.",
                            Nom = "Psychologie – Santé"
                        },
                        new
                        {
                            Id = "23",
                            Description = "Explorez les croyances spirituelles du monde entier, des textes sacrés aux mystères ésotériques.",
                            Nom = "Religion – Ésotérisme"
                        },
                        new
                        {
                            Id = "24",
                            Description = "Voyagez dans des mondes parallèles, où l'imaginaire rencontre souvent la réflexion profonde.",
                            Nom = "Roman de science-fiction et fantastique"
                        },
                        new
                        {
                            Id = "25",
                            Description = "Des romans venus de France et d'ailleurs pour vous transporter dans de multiples univers narratifs.",
                            Nom = "Roman français et étranger "
                        },
                        new
                        {
                            Id = "26",
                            Description = "Plongez dans des enquêtes palpitantes, des énigmes à résoudre et des mystères à élucider.",
                            Nom = "Roman policier"
                        },
                        new
                        {
                            Id = "27",
                            Description = "Découvrez la richesse de la littérature québécoise, avec ses voix uniques et ses paysages envoûtants.",
                            Nom = "Roman québécois"
                        },
                        new
                        {
                            Id = "28",
                            Description = "Éclairez votre curiosité avec des textes scientifiques accessibles et informatifs.",
                            Nom = "Savoir Sciences"
                        },
                        new
                        {
                            Id = "29",
                            Description = "De la biologie à la physique, découvrez les dernières découvertes et théories.",
                            Nom = "Sciences"
                        },
                        new
                        {
                            Id = "30",
                            Description = "Des textes éclairants pour comprendre et explorer la diversité de la sexualité humaine.",
                            Nom = "Sexualité"
                        },
                        new
                        {
                            Id = "31",
                            Description = "Pour les passionnés de sport et les chercheurs d'activités, des histoires inspirantes aux guides pratiques.",
                            Nom = "Sport - Loisirs"
                        },
                        new
                        {
                            Id = "3-2",
                            Description = "",
                            Nom = "Jeunesse",
                            ParentId = "3"
                        },
                        new
                        {
                            Id = "7-2",
                            Description = "",
                            Nom = "Vin",
                            ParentId = "7"
                        },
                        new
                        {
                            Id = "9-2",
                            Description = "",
                            Nom = "Langues",
                            ParentId = "9"
                        },
                        new
                        {
                            Id = "9-3",
                            Description = "",
                            Nom = "Éducation",
                            ParentId = "9"
                        },
                        new
                        {
                            Id = "11-2",
                            Description = "",
                            Nom = "Flore",
                            ParentId = "11"
                        },
                        new
                        {
                            Id = "12-2",
                            Description = "",
                            Nom = "Voyage",
                            ParentId = "12"
                        },
                        new
                        {
                            Id = "13-2",
                            Description = "",
                            Nom = "Économie",
                            ParentId = "13"
                        },
                        new
                        {
                            Id = "13-3",
                            Description = "",
                            Nom = "droit",
                            ParentId = "13"
                        },
                        new
                        {
                            Id = "15-2",
                            Description = "",
                            Nom = "Politique",
                            ParentId = "15"
                        },
                        new
                        {
                            Id = "19-2",
                            Description = "",
                            Nom = "Tourisme",
                            ParentId = "19"
                        },
                        new
                        {
                            Id = "19-3",
                            Description = "",
                            Nom = "Nature",
                            ParentId = "19"
                        },
                        new
                        {
                            Id = "20-2",
                            Description = "",
                            Nom = "Famille",
                            ParentId = "20"
                        },
                        new
                        {
                            Id = "21-2",
                            Description = "",
                            Nom = "Théâtre",
                            ParentId = "21"
                        },
                        new
                        {
                            Id = "21-3",
                            Description = "",
                            Nom = "Essais",
                            ParentId = "21"
                        },
                        new
                        {
                            Id = "22-2",
                            Description = "",
                            Nom = "Santé",
                            ParentId = "22"
                        },
                        new
                        {
                            Id = "23-2",
                            Description = "",
                            Nom = "Ésotérisme",
                            ParentId = "23"
                        },
                        new
                        {
                            Id = "31-2",
                            Description = "",
                            Nom = "Loisirs",
                            ParentId = "31"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Commande", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdresseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnDemandeAnnulation")
                        .HasColumnType("bit");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrixTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PromotionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatutCommandeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdresseId");

                    b.HasIndex("MembreId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("StatutCommandeId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("VLISSIDES.Models.DemandeNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LivreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotificationEnvoyee")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DemandesNotifications");
                });

            modelBuilder.Entity("VLISSIDES.Models.Don", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Montant")
                        .HasColumnType("float");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Dons");
                });

            modelBuilder.Entity("VLISSIDES.Models.Evaluation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateEvaluation")
                        .HasColumnType("datetime2");

                    b.Property<string>("LivreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LivreId");

                    b.HasIndex("MembreId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("VLISSIDES.Models.Evenement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lieu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NbPlaces")
                        .HasColumnType("int");

                    b.Property<int>("NbPlacesMembre")
                        .HasColumnType("int");

                    b.Property<int?>("NbPlacesReservees")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Prix")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Evenements");
                });

            modelBuilder.Entity("VLISSIDES.Models.Favori", b =>
                {
                    b.Property<string>("MembreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LivreId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MembreId", "LivreId");

                    b.HasIndex("LivreId");

                    b.ToTable("Favoris");
                });

            modelBuilder.Entity("VLISSIDES.Models.Langue", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Langues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Code = "fr",
                            Nom = "Français"
                        },
                        new
                        {
                            Id = "2",
                            Code = "en",
                            Nom = "Anglais"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Livre", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommandeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Couverture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePublication")
                        .HasColumnType("datetime2");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaisonEditionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NbExemplaires")
                        .HasColumnType("int");

                    b.Property<int>("NbPages")
                        .HasColumnType("int");

                    b.Property<string>("Resume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlNumerique")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("LangueId");

                    b.HasIndex("MaisonEditionId");

                    b.ToTable("Livres", (string)null);
                });

            modelBuilder.Entity("VLISSIDES.Models.LivreAuteur", b =>
                {
                    b.Property<string>("LivreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuteurId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LivreId", "AuteurId");

                    b.HasIndex("AuteurId");

                    b.ToTable("LivreAuteurs", (string)null);
                });

            modelBuilder.Entity("VLISSIDES.Models.LivreCategorie", b =>
                {
                    b.Property<string>("LivreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategorieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LivreId", "CategorieId");

                    b.HasIndex("CategorieId");

                    b.ToTable("LivreCategories", (string)null);
                });

            modelBuilder.Entity("VLISSIDES.Models.LivreCommande", b =>
                {
                    b.Property<string>("LivreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommandeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EnDemandeRetourner")
                        .HasColumnType("bit");

                    b.Property<double>("PrixAchat")
                        .HasColumnType("float");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.Property<int?>("QuantiteARetourner")
                        .HasColumnType("int");

                    b.Property<string>("TypeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeLivreId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LivreId", "CommandeId");

                    b.HasIndex("CommandeId");

                    b.HasIndex("TypeLivreId");

                    b.ToTable("LivreCommandes");
                });

            modelBuilder.Entity("VLISSIDES.Models.LivrePanier", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LivreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("PrixApresPromotion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PrixOriginal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PromotionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantite")
                        .HasColumnType("int");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeLivreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LivreId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("TypeLivreId");

                    b.HasIndex("UserId");

                    b.ToTable("LivrePanier");
                });

            modelBuilder.Entity("VLISSIDES.Models.LivreTypeLivre", b =>
                {
                    b.Property<string>("LivreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeLivreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("LivreId", "TypeLivreId");

                    b.HasIndex("TypeLivreId");

                    b.ToTable("LivreTypeLivres", (string)null);
                });

            modelBuilder.Entity("VLISSIDES.Models.MaisonEdition", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaisonEditions", (string)null);
                });

            modelBuilder.Entity("VLISSIDES.Models.Promotion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuteurId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategorieId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodePromo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommandeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LivrePanierId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LivresAcheter")
                        .HasColumnType("int");

                    b.Property<int?>("LivresGratuits")
                        .HasColumnType("int");

                    b.Property<string>("MaisonEditionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PourcentageRabais")
                        .HasColumnType("int");

                    b.Property<string>("TypePromotion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuteurId");

                    b.HasIndex("CategorieId");

                    b.HasIndex("MaisonEditionId");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            CodePromo = "BIRTHDAY",
                            DateDebut = new DateTime(2023, 12, 6, 16, 40, 51, 523, DateTimeKind.Local).AddTicks(8484),
                            DateFin = new DateTime(2024, 12, 6, 16, 40, 51, 523, DateTimeKind.Local).AddTicks(8500),
                            Description = "Ce code promo est uniquement valide durant votre mois d'anniversaire.",
                            Image = "/img/images_Promo/birthday.jpg",
                            Nom = "Promotion Anniversaire",
                            PourcentageRabais = 10,
                            TypePromotion = "pourcentage"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateReservation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EnDemandeAnnuler")
                        .HasColumnType("bit");

                    b.Property<string>("EvenementId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.Property<decimal?>("prixAchat")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EvenementId");

                    b.HasIndex("MembreId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("VLISSIDES.Models.StatutCommande", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("StatutCommande", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Nom = "En attente"
                        },
                        new
                        {
                            Id = "2",
                            Nom = "En cours de traitement"
                        },
                        new
                        {
                            Id = "3",
                            Nom = "En cours de livraison"
                        },
                        new
                        {
                            Id = "4",
                            Nom = "Livrée"
                        },
                        new
                        {
                            Id = "5",
                            Nom = "Annulée"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.TypeLivre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeLivres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Nom = "Papier"
                        },
                        new
                        {
                            Id = "2",
                            Nom = "Numérique"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Employe", b =>
                {
                    b.HasBaseType("VLISSIDES.Models.ApplicationUser");

                    b.Property<string>("NoEmploye")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Employe");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            AdressePrincipaleId = "",
                            ConcurrencyStamp = "5eecdf0d-640d-4f94-b4a9-2c109fde31bf",
                            Email = "employe@employe.com",
                            EmailConfirmed = true,
                            IsBanned = false,
                            LockoutEnabled = false,
                            Nom = "EMPLOYE",
                            NormalizedEmail = "EMPLOYE@EMPLOYE.COM",
                            NormalizedUserName = "EMPLOYE@EMPLOYE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5A0+Sh49GqZJZev/DKqD7yieTvqVejrmGV0mV6PL5KNos4tLJnJL1tHceX7HezGA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "Employe",
                            SecurityStamp = "52ae3d4c-3ce5-4033-bc4b-48e749b6f8d5",
                            TwoFactorEnabled = false,
                            UserName = "employe@employe.com",
                            NoEmploye = "007"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Membre", b =>
                {
                    b.HasBaseType("VLISSIDES.Models.ApplicationUser");

                    b.Property<string>("CommandeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdhesion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoMembre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReservationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Membre");

                    b.HasData(
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            AdressePrincipaleId = "",
                            ConcurrencyStamp = "4322384b-6996-4e6b-9383-fd42fe798a27",
                            Email = "membre@membre.com",
                            EmailConfirmed = true,
                            IsBanned = false,
                            LockoutEnabled = false,
                            Nom = "MEMBRE",
                            NormalizedEmail = "MEMBRE@MEMBRE.COM",
                            NormalizedUserName = "MEMBRE@MEMBRE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5A0+Sh49GqZJZev/DKqD7yieTvqVejrmGV0mV6PL5KNos4tLJnJL1tHceX7HezGA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "Membre",
                            SecurityStamp = "4926566b-d912-4fcd-85d7-fca08e3faf8e",
                            TwoFactorEnabled = false,
                            UserName = "membre@membre.com",
                            DateAdhesion = new DateTime(2023, 12, 6, 16, 40, 51, 497, DateTimeKind.Local).AddTicks(2413),
                            NoMembre = "123456"
                        },
                        new
                        {
                            Id = "c7d81843-cbe3-4709-abd3-d619f8b4d61c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68503647-6230-42e0-849b-83e38546993c",
                            DateNaissance = new DateTime(2001, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MGosselin@gmail.com",
                            EmailConfirmed = true,
                            IsBanned = false,
                            LockoutEnabled = false,
                            Nom = "Gosselin",
                            NormalizedEmail = "MGOSSELIN@GMAIL.COM",
                            NormalizedUserName = "MGOSSELIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG2FxypOmlwt8wBJ15Lix0ildkx06PGGh8lshSRZV4mL5/gSYSsvDQjjmhhae5AQtA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "Marcel",
                            SecurityStamp = "54af64b0-5fb3-4e79-aa15-dd7274e3c064",
                            TwoFactorEnabled = false,
                            UserName = "MGosselin@gmail.com",
                            DateAdhesion = new DateTime(2023, 12, 6, 16, 40, 51, 497, DateTimeKind.Local).AddTicks(2486),
                            NoMembre = "1649ec0c-b9d3-4c6d-9fef-67c0c75fb3a7",
                            StripeCustomerId = "7"
                        },
                        new
                        {
                            Id = "ae645e99-7c97-42c4-a2db-0cee813b8c39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e6b4e14-5c79-4224-92c5-19da9fca9441",
                            DateNaissance = new DateTime(1993, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "SFallu@gmail.com",
                            EmailConfirmed = true,
                            IsBanned = false,
                            LockoutEnabled = false,
                            Nom = "Fallu",
                            NormalizedEmail = "SFALLU@GMAIL.COM",
                            NormalizedUserName = "SFALLU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB++GAtnX8MB2kP+Fb8vawUXYbE6fOijAeJWXravAgF1RT3cG+qKBEVJ7Y0pN3iH/A==",
                            PhoneNumberConfirmed = false,
                            Prenom = "Stephane",
                            SecurityStamp = "653a88ff-7402-4f11-be43-b36a9f59d0c3",
                            TwoFactorEnabled = false,
                            UserName = "SFallu@gmail.com",
                            DateAdhesion = new DateTime(2023, 12, 6, 16, 40, 51, 508, DateTimeKind.Local).AddTicks(130),
                            NoMembre = "bc64fbbd-3696-4515-b1ec-7fde44cff778",
                            StripeCustomerId = "8"
                        },
                        new
                        {
                            Id = "0d343967-cb36-4514-a5d8-d64b248f3eb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6d37166-df75-4cfd-93bd-64bc194f3c2d",
                            DateNaissance = new DateTime(2002, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "SDemers@gmail.com",
                            EmailConfirmed = true,
                            IsBanned = false,
                            LockoutEnabled = false,
                            Nom = "Demers",
                            NormalizedEmail = "SDEMERS@GMAIL.COM",
                            NormalizedUserName = "SDEMERS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFEpbbZ9PAEtOSFhF9QxUt0RwHYPZV9H1Im54l9xvjpEHc5sdrTyMQoTnhPM+3QfbQ==",
                            PhoneNumberConfirmed = false,
                            Prenom = "Sylvie",
                            SecurityStamp = "3cb0ba8e-1bb4-4159-b106-7c34fafb5c86",
                            TwoFactorEnabled = false,
                            UserName = "SDemers@gmail.com",
                            DateAdhesion = new DateTime(2023, 12, 6, 16, 40, 51, 514, DateTimeKind.Local).AddTicks(3995),
                            NoMembre = "67b12e0e-468a-40c3-aedd-35154c510b97",
                            StripeCustomerId = "9"
                        },
                        new
                        {
                            Id = "85761bd9-65e9-4568-9290-ceab2d36498d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85f22082-b25a-44e4-b0be-eab28852e678",
                            DateNaissance = new DateTime(2004, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tonyhuynh0412@gmail.com",
                            EmailConfirmed = true,
                            IsBanned = false,
                            LockoutEnabled = false,
                            Nom = "Huynh",
                            NormalizedEmail = "TONYHUYNH0412@GMAIL.COM",
                            NormalizedUserName = "TONYHUYNH0412@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5A0+Sh49GqZJZev/DKqD7yieTvqVejrmGV0mV6PL5KNos4tLJnJL1tHceX7HezGA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "Tony",
                            SecurityStamp = "cf649511-c90c-47aa-a000-0467a168c8db",
                            TwoFactorEnabled = false,
                            UserName = "tonyhuynh0412@gmail.com",
                            DateAdhesion = new DateTime(2023, 12, 6, 16, 40, 51, 520, DateTimeKind.Local).AddTicks(9510),
                            NoMembre = "d07230f0-cd95-40e4-9942-6339dc0c0ec8",
                            StripeCustomerId = "10"
                        },
                        new
                        {
                            Id = "73f2b3b0-f352-49d3-9e96-92e48e0f2841",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "342168d2-2d5e-4c03-b90a-f6f4c6c87dc9",
                            DateNaissance = new DateTime(2004, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "julien.landry1800@gmail.com",
                            EmailConfirmed = true,
                            IsBanned = false,
                            LockoutEnabled = false,
                            Nom = "Landry",
                            NormalizedEmail = "JULIEN.LANDRY1800@GMAIL.COM",
                            NormalizedUserName = "JULIEN.LANDRY1800@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5A0+Sh49GqZJZev/DKqD7yieTvqVejrmGV0mV6PL5KNos4tLJnJL1tHceX7HezGA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "Julien",
                            SecurityStamp = "fd28ee8b-4328-41b9-b55c-3aec0508211d",
                            TwoFactorEnabled = false,
                            UserName = "julien.landry1800@gmail.com",
                            DateAdhesion = new DateTime(2023, 12, 6, 16, 40, 51, 521, DateTimeKind.Local).AddTicks(3098),
                            NoMembre = "a9a9740f-c061-47eb-9b99-0ffd25fd11d1",
                            StripeCustomerId = "11"
                        },
                        new
                        {
                            Id = "79130d7a-bfd4-4597-870c-acb98eabcee8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44967a35-7803-4dbc-95aa-a82b99e6f71c",
                            DateNaissance = new DateTime(2004, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jlgouaho@gmail.com",
                            EmailConfirmed = true,
                            IsBanned = false,
                            LockoutEnabled = false,
                            Nom = "JEAN-LUC GOUAHO",
                            NormalizedEmail = "JLGOUAHO@GMAIL.COM",
                            NormalizedUserName = "JLGOUAHO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5A0+Sh49GqZJZev/DKqD7yieTvqVejrmGV0mV6PL5KNos4tLJnJL1tHceX7HezGA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "Deto",
                            SecurityStamp = "1f3b3332-1ada-4bf6-9da8-156ff6183f80",
                            TwoFactorEnabled = false,
                            UserName = "jlgouaho@gmail.com",
                            DateAdhesion = new DateTime(2023, 12, 6, 16, 40, 51, 521, DateTimeKind.Local).AddTicks(4916),
                            NoMembre = "62006175-c9dd-4f84-8e11-0d624ac5655d",
                            StripeCustomerId = "12"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VLISSIDES.Models.Adresse", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", "UtilisateurLivraison")
                        .WithMany("AdressesLivraison")
                        .HasForeignKey("UtilisateurLivraisonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VLISSIDES.Models.ApplicationUser", "UtilisateurPrincipal")
                        .WithOne("AdressePrincipale")
                        .HasForeignKey("VLISSIDES.Models.Adresse", "UtilisateurPrincipalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UtilisateurLivraison");

                    b.Navigation("UtilisateurPrincipal");
                });

            modelBuilder.Entity("VLISSIDES.Models.Categorie", b =>
                {
                    b.HasOne("VLISSIDES.Models.Categorie", "Parent")
                        .WithMany("Enfants")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("VLISSIDES.Models.Commande", b =>
                {
                    b.HasOne("VLISSIDES.Models.Adresse", "AdresseLivraison")
                        .WithMany()
                        .HasForeignKey("AdresseId");

                    b.HasOne("VLISSIDES.Models.Membre", "Membre")
                        .WithMany("Commandes")
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Promotion", "Promotion")
                        .WithMany("Commandes")
                        .HasForeignKey("PromotionId");

                    b.HasOne("VLISSIDES.Models.StatutCommande", "StatutCommande")
                        .WithMany()
                        .HasForeignKey("StatutCommandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdresseLivraison");

                    b.Navigation("Membre");

                    b.Navigation("Promotion");

                    b.Navigation("StatutCommande");
                });

            modelBuilder.Entity("VLISSIDES.Models.Don", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VLISSIDES.Models.Evaluation", b =>
                {
                    b.HasOne("VLISSIDES.Models.Livre", "Livre")
                        .WithMany("Evaluations")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Membre", "Membre")
                        .WithMany()
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livre");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("VLISSIDES.Models.Favori", b =>
                {
                    b.HasOne("VLISSIDES.Models.Livre", "Livre")
                        .WithMany("Favoris")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Membre", "Membre")
                        .WithMany("Favoris")
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livre");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("VLISSIDES.Models.Livre", b =>
                {
                    b.HasOne("VLISSIDES.Models.Commande", null)
                        .WithMany("Livres")
                        .HasForeignKey("CommandeId");

                    b.HasOne("VLISSIDES.Models.Langue", "Langue")
                        .WithMany("Livres")
                        .HasForeignKey("LangueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.MaisonEdition", "MaisonEdition")
                        .WithMany("Livres")
                        .HasForeignKey("MaisonEditionId");

                    b.Navigation("Langue");

                    b.Navigation("MaisonEdition");
                });

            modelBuilder.Entity("VLISSIDES.Models.LivreAuteur", b =>
                {
                    b.HasOne("VLISSIDES.Models.Auteur", "Auteur")
                        .WithMany("Livres")
                        .HasForeignKey("AuteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Livre", "Livre")
                        .WithMany("LivreAuteurs")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auteur");

                    b.Navigation("Livre");
                });

            modelBuilder.Entity("VLISSIDES.Models.LivreCategorie", b =>
                {
                    b.HasOne("VLISSIDES.Models.Categorie", "Categorie")
                        .WithMany("Livres")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Livre", "Livre")
                        .WithMany("Categories")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorie");

                    b.Navigation("Livre");
                });

            modelBuilder.Entity("VLISSIDES.Models.LivreCommande", b =>
                {
                    b.HasOne("VLISSIDES.Models.Commande", "Commande")
                        .WithMany("LivreCommandes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Livre", "Livre")
                        .WithMany("LivreCommandes")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.TypeLivre", "TypeLivre")
                        .WithMany()
                        .HasForeignKey("TypeLivreId");

                    b.Navigation("Commande");

                    b.Navigation("Livre");

                    b.Navigation("TypeLivre");
                });

            modelBuilder.Entity("VLISSIDES.Models.LivrePanier", b =>
                {
                    b.HasOne("VLISSIDES.Models.Livre", "Livre")
                        .WithMany("LivrePanier")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Promotion", "Promotion")
                        .WithMany("LivrePaniers")
                        .HasForeignKey("PromotionId");

                    b.HasOne("VLISSIDES.Models.TypeLivre", "TypeLivre")
                        .WithMany()
                        .HasForeignKey("TypeLivreId");

                    b.HasOne("VLISSIDES.Models.ApplicationUser", "User")
                        .WithMany("Panier")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Livre");

                    b.Navigation("Promotion");

                    b.Navigation("TypeLivre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VLISSIDES.Models.LivreTypeLivre", b =>
                {
                    b.HasOne("VLISSIDES.Models.Livre", "Livre")
                        .WithMany("LivreTypeLivres")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.TypeLivre", "TypeLivre")
                        .WithMany("TypeLivres")
                        .HasForeignKey("TypeLivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livre");

                    b.Navigation("TypeLivre");
                });

            modelBuilder.Entity("VLISSIDES.Models.Promotion", b =>
                {
                    b.HasOne("VLISSIDES.Models.Auteur", "Auteur")
                        .WithMany("Promotions")
                        .HasForeignKey("AuteurId");

                    b.HasOne("VLISSIDES.Models.Categorie", "Categorie")
                        .WithMany("Promotions")
                        .HasForeignKey("CategorieId");

                    b.HasOne("VLISSIDES.Models.MaisonEdition", "MaisonEdition")
                        .WithMany("Promotions")
                        .HasForeignKey("MaisonEditionId");

                    b.Navigation("Auteur");

                    b.Navigation("Categorie");

                    b.Navigation("MaisonEdition");
                });

            modelBuilder.Entity("VLISSIDES.Models.Reservation", b =>
                {
                    b.HasOne("VLISSIDES.Models.Evenement", "Evenement")
                        .WithMany("Reservations")
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Membre", "Membre")
                        .WithMany("Reservations")
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evenement");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("VLISSIDES.Models.ApplicationUser", b =>
                {
                    b.Navigation("AdressePrincipale");

                    b.Navigation("AdressesLivraison");

                    b.Navigation("Panier");
                });

            modelBuilder.Entity("VLISSIDES.Models.Auteur", b =>
                {
                    b.Navigation("Livres");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("VLISSIDES.Models.Categorie", b =>
                {
                    b.Navigation("Enfants");

                    b.Navigation("Livres");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("VLISSIDES.Models.Commande", b =>
                {
                    b.Navigation("LivreCommandes");

                    b.Navigation("Livres");
                });

            modelBuilder.Entity("VLISSIDES.Models.Evenement", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("VLISSIDES.Models.Langue", b =>
                {
                    b.Navigation("Livres");
                });

            modelBuilder.Entity("VLISSIDES.Models.Livre", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Evaluations");

                    b.Navigation("Favoris");

                    b.Navigation("LivreAuteurs");

                    b.Navigation("LivreCommandes");

                    b.Navigation("LivrePanier");

                    b.Navigation("LivreTypeLivres");
                });

            modelBuilder.Entity("VLISSIDES.Models.MaisonEdition", b =>
                {
                    b.Navigation("Livres");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("VLISSIDES.Models.Promotion", b =>
                {
                    b.Navigation("Commandes");

                    b.Navigation("LivrePaniers");
                });

            modelBuilder.Entity("VLISSIDES.Models.TypeLivre", b =>
                {
                    b.Navigation("TypeLivres");
                });

            modelBuilder.Entity("VLISSIDES.Models.Membre", b =>
                {
                    b.Navigation("Commandes");

                    b.Navigation("Favoris");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
