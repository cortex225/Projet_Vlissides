// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VLISSIDES.Data;

#nullable disable

namespace VLISSIDES.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AuteurLivre", b =>
                {
                    b.Property<string>("AuteurId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LivresId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AuteurId", "LivresId");

                    b.HasIndex("LivresId");

                    b.ToTable("AuteurLivre");
                });

            modelBuilder.Entity("CategorieLivre", b =>
                {
                    b.Property<string>("CategoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LivresId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoriesId", "LivresId");

                    b.HasIndex("LivresId");

                    b.ToTable("CategorieLivre");
                });

            modelBuilder.Entity("LangueLivre", b =>
                {
                    b.Property<string>("LanguesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LivresId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LanguesId", "LivresId");

                    b.HasIndex("LivresId");

                    b.ToTable("LangueLivre");
                });

            modelBuilder.Entity("LivreTypeLivre", b =>
                {
                    b.Property<string>("LivresId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypesLivreId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LivresId", "TypesLivreId");

                    b.HasIndex("TypesLivreId");

                    b.ToTable("LivreTypeLivre");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0",
                            ConcurrencyStamp = "c67845d3-8ee3-4674-a131-b8f8b62a0496",
                            Name = "Employe",
                            NormalizedName = "EMPLOYE"
                        },
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "52c06941-650c-4944-8605-f2a4a375f81f",
                            Name = "Membre",
                            NormalizedName = "MEMBRE"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "ba9b522e-e73a-4d07-bb1b-693d1f4aaacd",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "0"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "0",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VLISSIDES.Models.Adresse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoCivique")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilisateurLivraisonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UtilisateurPrincipalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurLivraisonId");

                    b.HasIndex("UtilisateurPrincipalId")
                        .IsUnique()
                        .HasFilter("[UtilisateurPrincipalId] IS NOT NULL");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("VLISSIDES.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AdresseLivraisonId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdressePrincipaleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14a49074-dd8d-4aab-991f-4892481b8287",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nom = "ADMIN",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5A0+Sh49GqZJZev/DKqD7yieTvqVejrmGV0mV6PL5KNos4tLJnJL1tHceX7HezGA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "Admin",
                            SecurityStamp = "fb529e7a-e6cf-41ca-8cca-687109816421",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Auteur", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Biographie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Auteurs");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            Biographie = "Tony Stack est un auteur de livre de programmation",
                            Nom = "Tony",
                            Photo = "",
                            Prenom = "Stack"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Categorie", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Description = "L'art sous toutes ses facettes : peinture, sculpture, musique, street art... Vous trouverez ici des monographies, des catalogues d'exposition, des biographies d'artistes et une multitude de beaux livres. Les livres sont classés par date de parution, les plus récents en tête. 1 914 livres sont proposés dans cette catégorie.",
                            Nom = "Art musique et cinéma"
                        },
                        new
                        {
                            Id = "2",
                            Description = " Dans cette catégorie : Bandes dessinées, comics, romans graphiques et mangas. Choisissez une sous-catégorie (BD ou manga) pour affiner la sélection. Les livres sont classés par date de parution, les plus récents en tête. ",
                            Nom = "Bandes dessinées"
                        },
                        new
                        {
                            Id = "3",
                            Description = "Les livres de cuisine ont le vent en poupe, malgré la disponibilité de multiples recettes sur internet. Dans cette catégorie, vous trouverez des ouvrages généralistes ou thématiques, pour ceux qui doivent suivre un régime par exemple ou qui, simplement, font attention à leur alimentation. ",
                            Nom = "Cuisine"
                        },
                        new
                        {
                            Id = "4",
                            Description = "Dans cette catégorie : tous les ouvrages qui peuvent aider à mieux vivre. Les livres sont classés par date de parution, les plus récents en tête.",
                            Nom = "Développement personnel"
                        },
                        new
                        {
                            Id = "5",
                            Description = "Dans cette catégorie : tous les dictionnaires pour tous les niveaux et tous les âges, mais aussi les méthodes d'apprentissage des langues. Les livres sont classés par date de parution, les plus récents en tête.",
                            Nom = "Dictionnaires & langues"
                        },
                        new
                        {
                            Id = "6",
                            Description = "Les livres sont classés par date de parution, les plus récents en tête.",
                            Nom = "Droit & économie"
                        },
                        new
                        {
                            Id = "7",
                            Description = "La production de livres ne se limite pas à la littérature. Vous trouverez dans cette catégories des essais ou documents, politiques ou non. Les livres sont classés par date de parution, les plus récents en tête.",
                            Nom = "Essais et documents"
                        },
                        new
                        {
                            Id = "8",
                            Description = "Dans cette catégorie : tous les guides pratiques pour vous aider dans la vie quotidienne. Les livres sont classés par date de parution, les plus récents en tête.",
                            Nom = "Guides pratiques"
                        },
                        new
                        {
                            Id = "9",
                            Description = "L'histoire permet de comprendre le présent. Vous trouverez ici tout ce qui a trait à l'histoire, de l'antiquité à nos jours, en France comme dans le monde. Les livres sont classés par date de parution, les plus récents en tête. ",
                            Nom = "Histoire"
                        },
                        new
                        {
                            Id = "10",
                            Description = "Dans cette catégorie : tous les livres qui ont un contenu humoristique. Les livres sont classés par date de parution, les plus récents en tête.",
                            Nom = "Humour"
                        },
                        new
                        {
                            Id = "11",
                            Description = " Dans cette catégorie : tous les livres qui ont un contenu liés à internet et des nouvelles techniques de l'information. Les livres sont classés par date de parution, les plus récents en tête.",
                            Nom = "Informatique et internet"
                        },
                        new
                        {
                            Id = "12",
                            Description = "Dans cette catégorie : tous les livres pour la jeunesse, du premier âge à l'adolescence. Les publications pour la jeunesse sont abondantes. Et c'est tant mieux. Inciter les plus jeunes à lire devrait être une priorité. ",
                            Nom = "Jeunesse"
                        },
                        new
                        {
                            Id = "13",
                            Description = "Dans cette catégorie, toute la littérature, française ou étrangère. Des classiques aux auteurs contemporains, le choix est large.",
                            Nom = "Littérature"
                        },
                        new
                        {
                            Id = "14",
                            Description = "Littérature sentimentale : un genre qui se renouvelle et qui a toujours ses adeptes. Passions et liaisons contrariées, les sentiments sont ici à l'honneur.",
                            Nom = "Littérature sentimentale"
                        },
                        new
                        {
                            Id = "15",
                            Description = "Romans noirs, polars, suspense, thrillers... tous les livres pour faire passer des nuits blanches aux amateurs de littérature noire. ",
                            Nom = "Policier, suspense, thrillers"
                        },
                        new
                        {
                            Id = "16",
                            Description = "Dans cette catégorie : tous les livres qui ont un contenu religieux ou spirituel. Les livres sont classés par date de parution, les plus récents en tête.",
                            Nom = "Religion et spiritualité"
                        },
                        new
                        {
                            Id = "17",
                            Description = "Dans cette catégorie : toutes les sciences sociales : ethnologie, philopsophie, psychologie, sociologie... L'histoire fait l'objet d'une catégorie à part. ",
                            Nom = "Sciences sociales"
                        },
                        new
                        {
                            Id = "18",
                            Description = "Dans cette catégorie : les ouvrages scientifiques, qu'ils soient destinés aux spécialistes ou au grand public. Les livres sont classés par date de parution, les plus récents en tête.",
                            Nom = "Sciences, techniques & médecine"
                        },
                        new
                        {
                            Id = "19",
                            Description = "Dans cette catégorie, tous les ouvrages scolaires, de la maternelle à l'enseignement supérieur. Les livres sont classés par date de parution, les plus récents en tête.",
                            Nom = "Scolaire et pédagogie"
                        },
                        new
                        {
                            Id = "20",
                            Description = "Dans cette catégorie : tous les livres de science-fiction et de fantasy. Les livres sont classés par date de parution, les plus récents en tête.",
                            Nom = "SF, Fantasy"
                        },
                        new
                        {
                            Id = "21",
                            Description = "Dans cette catégorie : tous les livres qui ont un contenu lié au sport et aux loisirs. Les livres sont classés par date de parution, les plus récents en tête.",
                            Nom = "Sports et loisirs"
                        },
                        new
                        {
                            Id = "22",
                            Description = "Dans cette catégorie : tous les livres qui ont un contenu lié au théâtre. Les livres sont classés par date de parution, les plus récents en tête.",
                            Nom = "Théâtre"
                        },
                        new
                        {
                            Id = "23",
                            Description = "Dans cette catégorie : tous les livres qui ont un contenu lié au tourisme et aux voyages. Les livres sont classés par date de parution, les plus récents en tête.",
                            Nom = "Tourisme et voyages"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Commande", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdresseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("datetime2");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PrixTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StatutCommandeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdresseId");

                    b.HasIndex("MembreId");

                    b.HasIndex("StatutCommandeId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("VLISSIDES.Models.Evaluation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEvaluation")
                        .HasColumnType("datetime2");

                    b.Property<string>("LivreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LivreId");

                    b.HasIndex("MembreId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("VLISSIDES.Models.Evenement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Evenements");
                });

            modelBuilder.Entity("VLISSIDES.Models.Favori", b =>
                {
                    b.Property<string>("MembreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LivreId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MembreId", "LivreId");

                    b.HasIndex("LivreId");

                    b.ToTable("Favoris");
                });

            modelBuilder.Entity("VLISSIDES.Models.Langue", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Langues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Code = "fr",
                            Nom = "Français"
                        },
                        new
                        {
                            Id = "2",
                            Code = "en",
                            Nom = "Anglais"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Livre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuteurId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategorieId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommandeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Couverture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePublication")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvaluationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaisonEditionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NbExemplaires")
                        .HasColumnType("int");

                    b.Property<int>("NbPages")
                        .HasColumnType("int");

                    b.Property<double>("Prix")
                        .HasColumnType("float");

                    b.Property<string>("Resume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeLivreId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("MaisonEditionId");

                    b.ToTable("Livres");
                });

            modelBuilder.Entity("VLISSIDES.Models.LivreCommande", b =>
                {
                    b.Property<string>("LivreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommandeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.HasKey("LivreId", "CommandeId");

                    b.HasIndex("CommandeId");

                    b.ToTable("LivreCommandes");
                });

            modelBuilder.Entity("VLISSIDES.Models.MaisonEdition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaisonEditions");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            Nom = "Maison d'édition par défaut"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateReservation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvenementId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EvenementId");

                    b.HasIndex("MembreId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("VLISSIDES.Models.StatutCommande", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("StatutCommande", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Nom = "En attente"
                        },
                        new
                        {
                            Id = "2",
                            Nom = "En cours de traitement"
                        },
                        new
                        {
                            Id = "3",
                            Nom = "En cours de livraison"
                        },
                        new
                        {
                            Id = "4",
                            Nom = "Livrée"
                        },
                        new
                        {
                            Id = "5",
                            Nom = "Annulée"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.TypeLivre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeLivres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Nom = "Neuf"
                        },
                        new
                        {
                            Id = "2",
                            Nom = "Numérique"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Employe", b =>
                {
                    b.HasBaseType("VLISSIDES.Models.ApplicationUser");

                    b.Property<string>("NoEmploye")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Employes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            AdressePrincipaleId = "",
                            ConcurrencyStamp = "90d38bb4-d6f9-4ae8-83aa-ae6b71894fc6",
                            Email = "employe@employe.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nom = "EMPLOYE",
                            NormalizedEmail = "EMPLOYE@EMPLOYE.COM",
                            NormalizedUserName = "EMPLOYE@EMPLOYE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5A0+Sh49GqZJZev/DKqD7yieTvqVejrmGV0mV6PL5KNos4tLJnJL1tHceX7HezGA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "Employe",
                            SecurityStamp = "ff9a9db9-218b-44c3-936a-494c93c817ea",
                            TwoFactorEnabled = false,
                            UserName = "employe@employe.com",
                            NoEmploye = "007"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Membre", b =>
                {
                    b.HasBaseType("VLISSIDES.Models.ApplicationUser");

                    b.Property<string>("CommandeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdhesion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoMembre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReservationId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Membres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            AdressePrincipaleId = "",
                            ConcurrencyStamp = "68efeb05-6978-437e-bb38-130f34ae6823",
                            Email = "membre@membre.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nom = "MEMBRE",
                            NormalizedEmail = "MEMBRE@MEMBRE.COM",
                            NormalizedUserName = "MEMBRE@MEMBRE.COM",
                            PhoneNumberConfirmed = false,
                            Prenom = "Membre",
                            SecurityStamp = "6339cfbb-98c9-4659-ad7f-afa7beeab313",
                            TwoFactorEnabled = false,
                            UserName = "membre@membre.com",
                            DateAdhesion = new DateTime(2023, 9, 8, 10, 5, 8, 969, DateTimeKind.Local).AddTicks(1513),
                            NoMembre = "123456"
                        });
                });

            modelBuilder.Entity("AuteurLivre", b =>
                {
                    b.HasOne("VLISSIDES.Models.Auteur", null)
                        .WithMany()
                        .HasForeignKey("AuteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Livre", null)
                        .WithMany()
                        .HasForeignKey("LivresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategorieLivre", b =>
                {
                    b.HasOne("VLISSIDES.Models.Categorie", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Livre", null)
                        .WithMany()
                        .HasForeignKey("LivresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LangueLivre", b =>
                {
                    b.HasOne("VLISSIDES.Models.Langue", null)
                        .WithMany()
                        .HasForeignKey("LanguesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Livre", null)
                        .WithMany()
                        .HasForeignKey("LivresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LivreTypeLivre", b =>
                {
                    b.HasOne("VLISSIDES.Models.Livre", null)
                        .WithMany()
                        .HasForeignKey("LivresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.TypeLivre", null)
                        .WithMany()
                        .HasForeignKey("TypesLivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VLISSIDES.Models.Adresse", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", "UtilisateurLivraison")
                        .WithMany("AdressesLivraison")
                        .HasForeignKey("UtilisateurLivraisonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VLISSIDES.Models.ApplicationUser", "UtilisateurPrincipal")
                        .WithOne("AdressePrincipale")
                        .HasForeignKey("VLISSIDES.Models.Adresse", "UtilisateurPrincipalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UtilisateurLivraison");

                    b.Navigation("UtilisateurPrincipal");
                });

            modelBuilder.Entity("VLISSIDES.Models.Commande", b =>
                {
                    b.HasOne("VLISSIDES.Models.Adresse", "AdresseLivraison")
                        .WithMany()
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Membre", "Membre")
                        .WithMany("Commandes")
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.StatutCommande", null)
                        .WithMany("Commandes")
                        .HasForeignKey("StatutCommandeId");

                    b.Navigation("AdresseLivraison");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("VLISSIDES.Models.Evaluation", b =>
                {
                    b.HasOne("VLISSIDES.Models.Livre", "Livre")
                        .WithMany("Evaluations")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Membre", "Membre")
                        .WithMany()
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livre");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("VLISSIDES.Models.Favori", b =>
                {
                    b.HasOne("VLISSIDES.Models.Livre", "Livre")
                        .WithMany("Favoris")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Membre", "Membre")
                        .WithMany("Favoris")
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livre");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("VLISSIDES.Models.Livre", b =>
                {
                    b.HasOne("VLISSIDES.Models.Commande", null)
                        .WithMany("Livres")
                        .HasForeignKey("CommandeId");

                    b.HasOne("VLISSIDES.Models.MaisonEdition", "MaisonEdition")
                        .WithMany("Livres")
                        .HasForeignKey("MaisonEditionId");

                    b.Navigation("MaisonEdition");
                });

            modelBuilder.Entity("VLISSIDES.Models.LivreCommande", b =>
                {
                    b.HasOne("VLISSIDES.Models.Commande", "Commande")
                        .WithMany("LivreCommandes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Livre", "Livre")
                        .WithMany("LivreCommandes")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Livre");
                });

            modelBuilder.Entity("VLISSIDES.Models.Reservation", b =>
                {
                    b.HasOne("VLISSIDES.Models.Evenement", "Evenement")
                        .WithMany("Reservations")
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Membre", "Membre")
                        .WithMany("Reservations")
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evenement");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("VLISSIDES.Models.Employe", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("VLISSIDES.Models.Employe", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VLISSIDES.Models.Membre", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("VLISSIDES.Models.Membre", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VLISSIDES.Models.ApplicationUser", b =>
                {
                    b.Navigation("AdressePrincipale");

                    b.Navigation("AdressesLivraison");
                });

            modelBuilder.Entity("VLISSIDES.Models.Commande", b =>
                {
                    b.Navigation("LivreCommandes");

                    b.Navigation("Livres");
                });

            modelBuilder.Entity("VLISSIDES.Models.Evenement", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("VLISSIDES.Models.Livre", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("Favoris");

                    b.Navigation("LivreCommandes");
                });

            modelBuilder.Entity("VLISSIDES.Models.MaisonEdition", b =>
                {
                    b.Navigation("Livres");
                });

            modelBuilder.Entity("VLISSIDES.Models.StatutCommande", b =>
                {
                    b.Navigation("Commandes");
                });

            modelBuilder.Entity("VLISSIDES.Models.Membre", b =>
                {
                    b.Navigation("Commandes");

                    b.Navigation("Favoris");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
