// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VLISSIDES.Data;

#nullable disable

namespace VLISSIDES.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
<<<<<<<< HEAD:VLISSIDES/VLISSIDES/Migrations/20230927064345_SousCategorieEtlivre.Designer.cs
    [Migration("20230927064345_SousCategorieEtlivre")]
    partial class SousCategorieEtlivre
========
    [Migration("20230921143307_init")]
    partial class init
>>>>>>>> Dev:VLISSIDES/VLISSIDES/Migrations/20230921143307_init.Designer.cs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AuteurLivre", b =>
                {
                    b.Property<string>("AuteursId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LivresId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AuteursId", "LivresId");

                    b.HasIndex("LivresId");

                    b.ToTable("AuteurLivre");
                });

            modelBuilder.Entity("CategorieLivre", b =>
                {
                    b.Property<string>("CategoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LivresId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoriesId", "LivresId");

                    b.HasIndex("LivresId");

                    b.ToTable("CategorieLivre");
                });

            modelBuilder.Entity("LivrePromotions", b =>
                {
                    b.Property<string>("LivresId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PromotionsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LivresId", "PromotionsId");

                    b.HasIndex("PromotionsId");

                    b.ToTable("LivrePromotions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0",
<<<<<<<< HEAD:VLISSIDES/VLISSIDES/Migrations/20230927064345_SousCategorieEtlivre.Designer.cs
                            ConcurrencyStamp = "fd6a4eb6-bc19-42bd-8fa2-1496336275f7",
========
                            ConcurrencyStamp = "4d7b200a-2e87-4a23-baf3-1ce91a7d8dfe",
>>>>>>>> Dev:VLISSIDES/VLISSIDES/Migrations/20230921143307_init.Designer.cs
                            Name = "Employe",
                            NormalizedName = "EMPLOYE"
                        },
                        new
                        {
                            Id = "1",
<<<<<<<< HEAD:VLISSIDES/VLISSIDES/Migrations/20230927064345_SousCategorieEtlivre.Designer.cs
                            ConcurrencyStamp = "f9b32fba-751e-4f34-a7e8-10fa664a0902",
========
                            ConcurrencyStamp = "0eaece4c-546e-416a-b644-90f14416e1b8",
>>>>>>>> Dev:VLISSIDES/VLISSIDES/Migrations/20230921143307_init.Designer.cs
                            Name = "Membre",
                            NormalizedName = "MEMBRE"
                        },
                        new
                        {
                            Id = "2",
<<<<<<<< HEAD:VLISSIDES/VLISSIDES/Migrations/20230927064345_SousCategorieEtlivre.Designer.cs
                            ConcurrencyStamp = "bdd77309-0c31-4439-b819-bc585b387c83",
========
                            ConcurrencyStamp = "c155a2e4-7090-4924-bf99-48af7ddc508b",
>>>>>>>> Dev:VLISSIDES/VLISSIDES/Migrations/20230921143307_init.Designer.cs
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "0"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "0",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VLISSIDES.Models.Adresse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoCivique")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilisateurLivraisonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UtilisateurPrincipalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurLivraisonId");

                    b.HasIndex("UtilisateurPrincipalId")
                        .IsUnique()
                        .HasFilter("[UtilisateurPrincipalId] IS NOT NULL");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("VLISSIDES.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AdresseLivraisonId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdressePrincipaleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0",
                            AccessFailedCount = 0,
<<<<<<<< HEAD:VLISSIDES/VLISSIDES/Migrations/20230927064345_SousCategorieEtlivre.Designer.cs
                            ConcurrencyStamp = "8fb0918b-b21e-4cd8-83ef-1c92f8cb886e",
========
                            ConcurrencyStamp = "4a0c7a44-de34-4577-932c-39e424727227",
>>>>>>>> Dev:VLISSIDES/VLISSIDES/Migrations/20230921143307_init.Designer.cs
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nom = "ADMIN",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5A0+Sh49GqZJZev/DKqD7yieTvqVejrmGV0mV6PL5KNos4tLJnJL1tHceX7HezGA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "Admin",
<<<<<<<< HEAD:VLISSIDES/VLISSIDES/Migrations/20230927064345_SousCategorieEtlivre.Designer.cs
                            SecurityStamp = "87d621fd-66ad-4c96-bfd5-ea8490dee9b8",
========
                            SecurityStamp = "60711858-14ca-4044-8ded-585a4f996176",
>>>>>>>> Dev:VLISSIDES/VLISSIDES/Migrations/20230921143307_init.Designer.cs
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Auteur", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NomAuteur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Auteurs");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            NomAuteur = "Tony"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Categorie", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Description = "Une section dédiée à l'exploration des chefs-d'œuvre artistiques, des mouvements et des artistes qui ont marqué l'histoire.",
                            Nom = "Art"
                        },
                        new
                        {
                            Id = "2",
                            Description = "Plongez dans un monde de bien-être, d'esthétique et d'équilibre pour enrichir votre quotidien.",
                            Nom = "Art de vivre"
                        },
                        new
                        {
                            Id = "3",
                            Description = "De colorées bandes dessinées aux histoires captivantes pour les plus jeunes, sans oublier une touche d'humour.",
                            Nom = "BD, Jeunesse, Humour"
                        },
                        new
                        {
                            Id = "4",
                            Description = "Un vaste choix de narrations graphiques, des super-héros aux récits autobiographiques.",
                            Nom = "Bandes dessinées"
                        },
                        new
                        {
                            Id = "5",
                            Description = "Découvrez les vies fascinantes des personnalités qui ont façonné le monde.",
                            Nom = "Biographie"
                        },
                        new
                        {
                            Id = "6",
                            Description = "Voyagez dans des mondes lointains avec des histoires intemporelles, des fables et des légendes.",
                            Nom = "Conte"
                        },
                        new
                        {
                            Id = "7",
                            Description = "Des recettes alléchantes aux guides sommeliers, découvrez les saveurs du monde.",
                            Nom = "Cuisine – Vin"
                        },
                        new
                        {
                            Id = "8",
                            Description = "Approfondissez votre compréhension des sociétés contemporaines et de leurs nuances culturelles.",
                            Nom = "Culture et Société"
                        },
                        new
                        {
                            Id = "9",
                            Description = "Des ressources pour les linguistes, les étudiants et les éternels apprenants.",
                            Nom = "Dictionnaire – Langues – Éducation"
                        },
                        new
                        {
                            Id = "10",
                            Description = "Engagez-vous dans des réflexions profondes et argumentatives sur des enjeux contemporains.",
                            Nom = "Essai"
                        },
                        new
                        {
                            Id = "11",
                            Description = "Explorez le monde naturel, de la canopée de la jungle aux profondeurs des océans.",
                            Nom = "Faune – Flore"
                        },
                        new
                        {
                            Id = "12",
                            Description = "Évadez-vous avec des guides de voyage et des récits d'aventuriers des quatre coins du monde.",
                            Nom = "Géographie – Voyage"
                        },
                        new
                        {
                            Id = "13",
                            Description = "Démystifiez le monde des affaires, la complexité économique et les arcanes du droit.",
                            Nom = "Gestion – Économie – droit"
                        },
                        new
                        {
                            Id = "14",
                            Description = "Conseils et astuces pour naviguer dans la vie quotidienne, du bricolage à la gestion du temps.",
                            Nom = "Guide pratique"
                        },
                        new
                        {
                            Id = "15",
                            Description = "Immergez-vous dans les moments clés de l'histoire et les débats politiques actuels. ",
                            Nom = "Histoire - Politique"
                        },
                        new
                        {
                            Id = "16",
                            Description = "Pour un moment de détente, une collection de recueils drôles et de satires.",
                            Nom = "Humour"
                        },
                        new
                        {
                            Id = "17",
                            Description = "Restez à la pointe de la technologie avec des guides sur les logiciels, le codage et les innovations numériques.",
                            Nom = "Informatique"
                        },
                        new
                        {
                            Id = "18",
                            Description = "Une riche collection de classiques et de nouvelles œuvres, pour les amateurs de belle lettre.",
                            Nom = "Littérature"
                        },
                        new
                        {
                            Id = "19",
                            Description = "Inspirez-vous pour votre prochaine aventure, qu'elle soit en pleine nature ou dans une métropole animée.",
                            Nom = "Loisir, Tourisme, Nature"
                        },
                        new
                        {
                            Id = "20",
                            Description = "Des ressources pour les parents et ceux qui aspirent à le devenir, pour une vie familiale épanouie.",
                            Nom = "Maternité – Famille"
                        },
                        new
                        {
                            Id = "21",
                            Description = "Laissez-vous emporter par le rythme des vers, l'intensité du théâtre et la profondeur des essais.",
                            Nom = "Poésie – Théâtre – Essais"
                        },
                        new
                        {
                            Id = "22",
                            Description = "omprenez mieux la complexité de l'esprit humain et les clés d'une vie saine.",
                            Nom = "Psychologie – Santé"
                        },
                        new
                        {
                            Id = "23",
                            Description = "Explorez les croyances spirituelles du monde entier, des textes sacrés aux mystères ésotériques.",
                            Nom = "Religion – Ésotérisme"
                        },
                        new
                        {
                            Id = "24",
                            Description = "Voyagez dans des mondes parallèles, où l'imaginaire rencontre souvent la réflexion profonde.",
                            Nom = "Roman de science-fiction et fantastique"
                        },
                        new
                        {
                            Id = "25",
                            Description = "Des romans venus de France et d'ailleurs pour vous transporter dans de multiples univers narratifs.",
                            Nom = "Roman français et étranger "
                        },
                        new
                        {
                            Id = "26",
                            Description = "Plongez dans des enquêtes palpitantes, des énigmes à résoudre et des mystères à élucider.",
                            Nom = "Roman policier"
                        },
                        new
                        {
                            Id = "27",
                            Description = "Découvrez la richesse de la littérature québécoise, avec ses voix uniques et ses paysages envoûtants.",
                            Nom = "Roman québécois"
                        },
                        new
                        {
                            Id = "28",
                            Description = "Éclairez votre curiosité avec des textes scientifiques accessibles et informatifs.",
                            Nom = "Savoir Sciences"
                        },
                        new
                        {
                            Id = "29",
                            Description = "De la biologie à la physique, découvrez les dernières découvertes et théories.",
                            Nom = "Sciences"
                        },
                        new
                        {
                            Id = "30",
                            Description = "Des textes éclairants pour comprendre et explorer la diversité de la sexualité humaine.",
                            Nom = "Sexualité"
                        },
                        new
                        {
                            Id = "31",
                            Description = "Pour les passionnés de sport et les chercheurs d'activités, des histoires inspirantes aux guides pratiques.",
                            Nom = "Sport - Loisirs"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Commande", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdresseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("datetime2");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PrixTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StatutCommandeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdresseId");

                    b.HasIndex("MembreId");

                    b.HasIndex("StatutCommandeId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("VLISSIDES.Models.Evaluation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEvaluation")
                        .HasColumnType("datetime2");

                    b.Property<string>("LivreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LivreId");

                    b.HasIndex("MembreId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("VLISSIDES.Models.Evenement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Evenements");
                });

            modelBuilder.Entity("VLISSIDES.Models.Favori", b =>
                {
                    b.Property<string>("MembreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LivreId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MembreId", "LivreId");

                    b.HasIndex("LivreId");

                    b.ToTable("Favoris");
                });

            modelBuilder.Entity("VLISSIDES.Models.Langue", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Langues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Code = "fr",
                            Nom = "Français"
                        },
                        new
                        {
                            Id = "2",
                            Code = "en",
                            Nom = "Anglais"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Livre", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommandeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Couverture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePublication")
                        .HasColumnType("datetime2");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaisonEditionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NbExemplaires")
                        .HasColumnType("int");

                    b.Property<int>("NbPages")
                        .HasColumnType("int");

                    b.Property<double>("Prix")
                        .HasColumnType("float");

                    b.Property<string>("Resume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeLivreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("LangueId");

                    b.HasIndex("MaisonEditionId");

                    b.HasIndex("TypeLivreId");

                    b.ToTable("Livres", (string)null);
                });

            modelBuilder.Entity("VLISSIDES.Models.LivreCommande", b =>
                {
                    b.Property<string>("LivreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommandeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.HasKey("LivreId", "CommandeId");

                    b.HasIndex("CommandeId");

                    b.ToTable("LivreCommandes");
                });

            modelBuilder.Entity("VLISSIDES.Models.MaisonEdition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaisonEditions");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            Nom = "Maison d'édition par défaut"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Promotions", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LivreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rabais")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("VLISSIDES.Models.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateReservation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvenementId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EvenementId");

                    b.HasIndex("MembreId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("VLISSIDES.Models.StatutCommande", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("StatutCommande", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Nom = "En attente"
                        },
                        new
                        {
                            Id = "2",
                            Nom = "En cours de traitement"
                        },
                        new
                        {
                            Id = "3",
                            Nom = "En cours de livraison"
                        },
                        new
                        {
                            Id = "4",
                            Nom = "Livrée"
                        },
                        new
                        {
                            Id = "5",
                            Nom = "Annulée"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.TypeLivre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeLivres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Nom = "Neuf"
                        },
                        new
                        {
                            Id = "2",
                            Nom = "Numérique"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Employe", b =>
                {
                    b.HasBaseType("VLISSIDES.Models.ApplicationUser");

                    b.Property<string>("NoEmploye")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Employes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            AdressePrincipaleId = "",
<<<<<<<< HEAD:VLISSIDES/VLISSIDES/Migrations/20230927064345_SousCategorieEtlivre.Designer.cs
                            ConcurrencyStamp = "418ec111-7366-40a3-88ae-89ddfbffc593",
========
                            ConcurrencyStamp = "37ad1b59-9539-4833-83ce-7d5c8599afb3",
>>>>>>>> Dev:VLISSIDES/VLISSIDES/Migrations/20230921143307_init.Designer.cs
                            Email = "employe@employe.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nom = "EMPLOYE",
                            NormalizedEmail = "EMPLOYE@EMPLOYE.COM",
                            NormalizedUserName = "EMPLOYE@EMPLOYE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5A0+Sh49GqZJZev/DKqD7yieTvqVejrmGV0mV6PL5KNos4tLJnJL1tHceX7HezGA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "Employe",
<<<<<<<< HEAD:VLISSIDES/VLISSIDES/Migrations/20230927064345_SousCategorieEtlivre.Designer.cs
                            SecurityStamp = "bf943785-a0a1-4e28-a766-7fe6042851c7",
========
                            SecurityStamp = "21c58b1d-362c-4046-bbc3-02fe3b65a207",
>>>>>>>> Dev:VLISSIDES/VLISSIDES/Migrations/20230921143307_init.Designer.cs
                            TwoFactorEnabled = false,
                            UserName = "employe@employe.com",
                            NoEmploye = "007"
                        });
                });

            modelBuilder.Entity("VLISSIDES.Models.Membre", b =>
                {
                    b.HasBaseType("VLISSIDES.Models.ApplicationUser");

                    b.Property<string>("CommandeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdhesion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoMembre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReservationId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Membres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            AdressePrincipaleId = "",
<<<<<<<< HEAD:VLISSIDES/VLISSIDES/Migrations/20230927064345_SousCategorieEtlivre.Designer.cs
                            ConcurrencyStamp = "fef3b071-0ea9-4f3c-90f4-ee9a98733036",
========
                            ConcurrencyStamp = "e303c1be-3e19-4d0e-bf40-ce4e967a3f72",
>>>>>>>> Dev:VLISSIDES/VLISSIDES/Migrations/20230921143307_init.Designer.cs
                            Email = "membre@membre.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nom = "MEMBRE",
                            NormalizedEmail = "MEMBRE@MEMBRE.COM",
                            NormalizedUserName = "MEMBRE@MEMBRE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5A0+Sh49GqZJZev/DKqD7yieTvqVejrmGV0mV6PL5KNos4tLJnJL1tHceX7HezGA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "Membre",
<<<<<<<< HEAD:VLISSIDES/VLISSIDES/Migrations/20230927064345_SousCategorieEtlivre.Designer.cs
                            SecurityStamp = "1eae0cb9-f3f5-4c86-9f05-e918ecf8744d",
                            TwoFactorEnabled = false,
                            UserName = "membre@membre.com",
                            DateAdhesion = new DateTime(2023, 9, 27, 2, 43, 44, 992, DateTimeKind.Local).AddTicks(4069),
========
                            SecurityStamp = "b9f1b193-1d39-4ac9-b121-7a6ab89267c5",
                            TwoFactorEnabled = false,
                            UserName = "membre@membre.com",
                            DateAdhesion = new DateTime(2023, 9, 21, 10, 33, 7, 527, DateTimeKind.Local).AddTicks(420),
>>>>>>>> Dev:VLISSIDES/VLISSIDES/Migrations/20230921143307_init.Designer.cs
                            NoMembre = "123456"
                        });
                });

            modelBuilder.Entity("AuteurLivre", b =>
                {
                    b.HasOne("VLISSIDES.Models.Auteur", null)
                        .WithMany()
                        .HasForeignKey("AuteursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Livre", null)
                        .WithMany()
                        .HasForeignKey("LivresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategorieLivre", b =>
                {
                    b.HasOne("VLISSIDES.Models.Categorie", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Livre", null)
                        .WithMany()
                        .HasForeignKey("LivresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LivrePromotions", b =>
                {
                    b.HasOne("VLISSIDES.Models.Livre", null)
                        .WithMany()
                        .HasForeignKey("LivresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Promotions", null)
                        .WithMany()
                        .HasForeignKey("PromotionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VLISSIDES.Models.Adresse", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", "UtilisateurLivraison")
                        .WithMany("AdressesLivraison")
                        .HasForeignKey("UtilisateurLivraisonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VLISSIDES.Models.ApplicationUser", "UtilisateurPrincipal")
                        .WithOne("AdressePrincipale")
                        .HasForeignKey("VLISSIDES.Models.Adresse", "UtilisateurPrincipalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UtilisateurLivraison");

                    b.Navigation("UtilisateurPrincipal");
                });

            modelBuilder.Entity("VLISSIDES.Models.Categorie", b =>
                {
                    b.HasOne("VLISSIDES.Models.Categorie", "Parent")
                        .WithMany("Enfants")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("VLISSIDES.Models.Commande", b =>
                {
                    b.HasOne("VLISSIDES.Models.Adresse", "AdresseLivraison")
                        .WithMany()
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Membre", "Membre")
                        .WithMany("Commandes")
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.StatutCommande", null)
                        .WithMany("Commandes")
                        .HasForeignKey("StatutCommandeId");

                    b.Navigation("AdresseLivraison");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("VLISSIDES.Models.Evaluation", b =>
                {
                    b.HasOne("VLISSIDES.Models.Livre", "Livre")
                        .WithMany("Evaluations")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Membre", "Membre")
                        .WithMany()
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livre");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("VLISSIDES.Models.Favori", b =>
                {
                    b.HasOne("VLISSIDES.Models.Livre", "Livre")
                        .WithMany("Favoris")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Membre", "Membre")
                        .WithMany("Favoris")
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livre");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("VLISSIDES.Models.Livre", b =>
                {
                    b.HasOne("VLISSIDES.Models.Commande", null)
                        .WithMany("Livres")
                        .HasForeignKey("CommandeId");

                    b.HasOne("VLISSIDES.Models.Langue", "Langue")
                        .WithMany("Livres")
                        .HasForeignKey("LangueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.MaisonEdition", "MaisonEdition")
                        .WithMany("Livres")
                        .HasForeignKey("MaisonEditionId");

                    b.HasOne("VLISSIDES.Models.TypeLivre", "TypesLivre")
                        .WithMany("Livres")
                        .HasForeignKey("TypeLivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Langue");

                    b.Navigation("MaisonEdition");

                    b.Navigation("TypesLivre");
                });

            modelBuilder.Entity("VLISSIDES.Models.LivreCommande", b =>
                {
                    b.HasOne("VLISSIDES.Models.Commande", "Commande")
                        .WithMany("LivreCommandes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Livre", "Livre")
                        .WithMany("LivreCommandes")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Livre");
                });

            modelBuilder.Entity("VLISSIDES.Models.Reservation", b =>
                {
                    b.HasOne("VLISSIDES.Models.Evenement", "Evenement")
                        .WithMany("Reservations")
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VLISSIDES.Models.Membre", "Membre")
                        .WithMany("Reservations")
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evenement");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("VLISSIDES.Models.Employe", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("VLISSIDES.Models.Employe", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VLISSIDES.Models.Membre", b =>
                {
                    b.HasOne("VLISSIDES.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("VLISSIDES.Models.Membre", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VLISSIDES.Models.ApplicationUser", b =>
                {
                    b.Navigation("AdressePrincipale");

                    b.Navigation("AdressesLivraison");
                });

            modelBuilder.Entity("VLISSIDES.Models.Categorie", b =>
                {
                    b.Navigation("Enfants");
                });

            modelBuilder.Entity("VLISSIDES.Models.Commande", b =>
                {
                    b.Navigation("LivreCommandes");

                    b.Navigation("Livres");
                });

            modelBuilder.Entity("VLISSIDES.Models.Evenement", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("VLISSIDES.Models.Langue", b =>
                {
                    b.Navigation("Livres");
                });

            modelBuilder.Entity("VLISSIDES.Models.Livre", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("Favoris");

                    b.Navigation("LivreCommandes");
                });

            modelBuilder.Entity("VLISSIDES.Models.MaisonEdition", b =>
                {
                    b.Navigation("Livres");
                });

            modelBuilder.Entity("VLISSIDES.Models.StatutCommande", b =>
                {
                    b.Navigation("Commandes");
                });

            modelBuilder.Entity("VLISSIDES.Models.TypeLivre", b =>
                {
                    b.Navigation("Livres");
                });

            modelBuilder.Entity("VLISSIDES.Models.Membre", b =>
                {
                    b.Navigation("Commandes");

                    b.Navigation("Favoris");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
